#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:cl-assembler) :silent t)
  )

(defpackage :ros.script.classembler.3803987182
  (:use :cl))
(in-package :ros.script.classembler.3803987182)

(defun make_counter (start)
  (let ((cnt start)) 
    (lambda () (incf cnt))))

(defparameter *symboltable* (make-hash-table))
(setf (gethash (intern "SP")   *symboltable*) 0)
(setf (gethash (intern "LCL")  *symboltable*) 1)
(setf (gethash (intern "ARG")  *symboltable*) 2)
(setf (gethash (intern "THIS") *symboltable*) 3)
(setf (gethash (intern "THAT") *symboltable*) 4)
(setf (gethash (intern "R0")   *symboltable*) 0)
(setf (gethash (intern "R1")   *symboltable*) 1)
(setf (gethash (intern "R2")   *symboltable*) 2)
(setf (gethash (intern "R3")   *symboltable*) 3)
(setf (gethash (intern "R4")   *symboltable*) 4)
(setf (gethash (intern "R5")   *symboltable*) 5)
(setf (gethash (intern "R6")   *symboltable*) 6)
(setf (gethash (intern "R7")   *symboltable*) 7)
(setf (gethash (intern "R8")   *symboltable*) 8)
(setf (gethash (intern "R9")   *symboltable*) 9)
(setf (gethash (intern "R10")  *symboltable*) 10)
(setf (gethash (intern "R11")  *symboltable*) 11)
(setf (gethash (intern "R12")  *symboltable*) 12)
(setf (gethash (intern "R13")  *symboltable*) 13)
(setf (gethash (intern "R14")  *symboltable*) 14)
(setf (gethash (intern "R15")  *symboltable*) 15)
(setf (gethash (intern "SCREEN")  *symboltable*) 16384)
(setf (gethash (intern "KBD")  *symboltable*) 24576) 
(setf counter_ram (make_counter 15))
(setf counter_rom 0)

(defun main (&rest argv)
  (declare (ignorable argv))
  (when (>= (length argv) 2)
    (let ((lis 
            (with-open-file (in (car argv) :direction :input)
              (loop for line = (read-line in nil)
                    while line collect (unless (= 0 (length line))
                                         (coerce line 'list))))
            
            ) )

      (cl-assembler/main:solve_symbol lis *symboltable* counter_rom)
      (with-open-file (out (cadr argv) :direction :output :if-exists :supersede)
        (loop for line in lis
              do (unless (or (> 2 (length line)) (string= #\/ (car line)) (string= #\( (car line)))  
                   (format out "~d~%" (cl-assembler/main:parse line *symboltable* counter_ram))))))))
;;; vim: set ft=lisp lisp:
